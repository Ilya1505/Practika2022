1. количество чеков за период по адресу магазина (адрес магазина и период):
--DROP FUNCTION count_receipt_with_shop(  character varying, date, date ); --оставить если нужно перезаписать функцию
--количество чеков за период
create or replace function count_receipt_with_shop(address_shop character varying, start_date date, end_date date)
returns setof bigint as $$
begin
--возвращаемые значения: количество чеков
return query select count(*)
from public."Receipt" as r
join public."Shop" as s on r."PK_shop" = s."PK_shop"
where r."date_receipt">=start_date and r."date_receipt"<=end_date and s."address" = address_shop;
--проверка на корректность переданных данных
if end_date-start_date < 0 then
raise exception 'Задан отрицательный период!';
end if;
return;
end;
$$ language plpgsql;
--пример вызова функции: select count_receipt_with_shop('Попова 25','2022-07-15','2022-07-15');

2. сколько магазин заработал за период (адрес магаза и период):
--DROP FUNCTION store_income(  character varying, date, date ); --оставить если нужно перезаписать функцию
--доход магазина за период
create or replace function store_income(address_shop character varying, start_date date, end_date date)
returns setof real as $$
begin
--возвращаемые значения: доход магазина
return query select sum (sr."all_price")
from public."Receipt" as r
join public."Shop" as s on r."PK_shop" = s."PK_shop"
join public."String_Receipt" as sr on sr."PK_receipt" = r."PK_receipt"
where r."date_receipt">=start_date and r."date_receipt"<=end_date and s."address" = address_shop;
--проверка на корректность переданных данных
if end_date-start_date < 0 then
raise exception 'Задан отрицательный период!';
end if;
return;
end;
$$ language plpgsql;
--пример вызова функции: select store_income('Попова 25','2022-07-15','2022-07-15');

3. сколько продано товара за конкретный период по названию товара (название, дату начала периода, дата окончания):
--DROP FUNCTION count_sale_product(  character varying, date, date ); --оставить если нужно перезаписать функцию
--количество проданного товара за период
create or replace function count_sale_product(name_product character varying, start_date date, end_date date)
returns setof bigint as $$
begin
--возвращаемые значения: количество товара
return query select sum (sr."count")
from public."Receipt" as r
join public."String_Receipt" as sr on sr."PK_receipt" = r."PK_receipt"
join public."Product" as p on p."PK_product" = sr."PK_product"
where r."date_receipt">=start_date and r."date_receipt"<=end_date
and p."name"=name_product;
--проверка на корректность переданных данных
if end_date-start_date < 0 then
raise exception 'Задан отрицательный период!';
end if;
return;
end;
$$ language plpgsql;
--пример вызова функции: select count_sale_product('пакет молока','2019-05-10','2023-12-15');

4.сколько заработано денег с товара за конкретный период (название, дату начала периода, дата окончания):

--DROP FUNCTION income_with_product(  character varying, date, date ); --оставить если нужно перезаписать функцию
--доход с проданного товара за период
create or replace function income_with_product(name_product character varying, start_date date, end_date date)
returns setof real as $$
begin
--возвращаемые значения: доход с товара
return query select sum (sr."all_price")
from public."Receipt" as r
join public."String_Receipt" as sr on sr."PK_receipt" = r."PK_receipt"
join public."Product" as p on p."PK_product" = sr."PK_product"
where r."date_receipt">=start_date and r."date_receipt"<=end_date
and p."name"=name_product;
--проверка на корректность переданных данных
if end_date-start_date < 0 then
raise exception 'Задан отрицательный период!';
end if;
return;
end;
$$ language plpgsql;
--пример вызова функции: select income_with_product('пакет молока','2019-05-10','2023-12-15');

5. полная стоимость чека по номеру чека(без скидок)

--DROP FUNCTION price_receipt(  integer ); --оставить если нужно перезаписать функцию
--полная цена чека по номеру чека
create or replace function price_receipt(ID_receipt integer)
returns setof double precision as $$
begin
--возвращаемые значения: цена в чеке
return query select sum (sr."count"*p."price_without_discount")
from public."Receipt" as r
join public."String_Receipt" as sr on sr."PK_receipt" = r."PK_receipt"
join public."Product" as p on p."PK_product" = sr."PK_product"
where r."PK_receipt"=ID_receipt;
--проверка на корректность переданных данных
if ID_receipt < 0 then
raise exception 'Неккоректный номер чека!';
end if;
return;
end;
$$ language plpgsql;
--пример вызова функции: select price_receipt(1);


6. цена чека со скидками
--DROP FUNCTION price_receipt_with_discount(  integer ); --оставить если нужно перезаписать функцию
--полная цена чека по номеру чека
create or replace function price_receipt_with_discount(ID_receipt integer)
returns setof real as $$
begin
--возвращаемые значения: цена в чеке
return query select sum (sr."all_price")
from public."Receipt" as r
join public."String_Receipt" as sr on sr."PK_receipt" = r."PK_receipt"
where r."PK_receipt"=ID_receipt;
--проверка на корректность переданных данных
if ID_receipt < 0 then
raise exception 'Неккоректный номер чека!';
end if;
return;
end;
$$ language plpgsql;

7.  сумма дохода за период
DROP FUNCTION sum_money(date_start date, date_end date); --оставить если нужно перезаписать функцию
--сумма дохода за период
create or replace function sum_money(date_start date, date_end date)
returns setof real as $$
begin
--возвращаемые значения: средний чек
return query select sum(sr."all_price") from public."String_Receipt" as sr
join public."Receipt" as r on sr."PK_receipt" = r."PK_receipt"
where r."date_receipt">=date_start and r."date_receipt"<=date_end;
--проверка на корректность переданных данных
if date_end-date_start < 0 then
raise exception 'Задан отрицательный период!';
end if;
return;
end;
$$ language plpgsql;

8.Количество чеков за период
--DROP FUNCTION count_receipt(date_start date, date_end date); --оставить если нужно перезаписать функцию
--количество чеков за период
create or replace function count_receipt(date_start date, date_end date)
returns setof bigint as $$
begin
--возвращаемые значения: средний чек
return query select count(*) from public."Receipt" as rec
where rec."date_receipt">=date_start and rec."date_receipt"<=date_end;
--проверка на корректность переданных данных
if date_end-date_start < 0 then
raise exception 'Задан отрицательный период!';
end if;
return;
end;
$$ language plpgsql;

9. Триггер на вставку строки String_Receipt:

create or replace function add_all_price() returns trigger
as $$
declare date_rec date; --переменная для хранения даты чека
declare all_price real;
begin

select rec."date_receipt" from public."Receipt" as rec
where rec."PK_receipt" = new."PK_receipt" into date_rec;

select rev."new_price" from public."Revaluation" as rev
where rev."PK_product"=new."PK_product" and rev."type"='скидка'
and date_rec>=rev."date_start" and date_rec<=rev."date_end" into all_price;
if not found then
raise notice 'if 1';
select rev."new_price" from public."Revaluation" as rev
where rev."PK_product"=new."PK_product" and rev."type"='переоценка'
and date_rec>=rev."date_start" into all_price;
end if;
if not found then
raise notice 'if 2';
select p."price_without_discount" from public."Product" as p
where p."PK_product"=new."PK_product" into all_price;
end if;
new."all_price":=all_price*new."count";
return new;
end;
$$ language plpgsql;
--создание триггера для строки, срабатывающего
--после вставки записи в таблицу String_Receipt
DROP TRIGGER IF EXISTS trig_insert ON "String_Receipt";
create trigger trig_insert before insert on "String_Receipt"
for each row execute procedure add_all_price();